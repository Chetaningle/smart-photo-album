AWSTemplateFormatVersion: "2010-09-09"
Resources:
  abcsmartalbumcom:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: abcsmartalbum.com
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  abcphotosb2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: abcphotos.b2

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref abcsmartalbumcom
                - /*
      Bucket: !Ref abcsmaabcrtalbumcom

    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref abcphotosb2
                - /*
      Bucket: !Ref abcphotosb2

  abcartifactopbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: abcartifact-op-bucket

  SampleFunction2:
  Type: AWS::Serverless::Function
  Properties:
    Handler: lambda_function.lambda_handler
    Runtime: python3.7
    FunctionName: cp-index-photos
    CodeUri: ./index-photos #Directory the source file is

  ES:
    Type: "AWS::OpenSearchService::Domain"
      Properties:
        DomainName: "photos"
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: "arn:aws:es:us-east-1:779985213601:domain/photos"
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: "false"
          InstanceCount: "1"
          ZoneAwarenessEnabled: "false"
          InstanceType: "t2.small.elasticsearch"
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: "gp2"
        ElasticsearchVersion: "7.1"

  LFPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt AdminRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref abcartifactopbucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              RunOrder: 1
              Configuration:
                Repo: "smart-photo-album"
                Branch: "main"
                OAuthToken: "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"
                Owner: "Chetaningle"
                PollForSourceChanges: "true"
              OutputArtifacts:
                - Name: SourceArtifact
              InputArtifacts: []
              Region: "us-east-1"
              Namespace: SourceVariables
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                ProjectName: "LambdaPipelineBuild"
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              Region: "us-east-1"
              Namespace: BuildVariables
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              RunOrder: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: "LambdaPipeline-changeset"
                RoleArn: !GetAtt AdminRole.Arn
                StackName: "lLambdaPipeline-stack"
                TemplatePath: BuildArtifact::outputtemplate.yml
              OutputArtifacts: []
              InputArtifacts:
                - Name: BuildArtifact
              Region: us-east-1
              Namespace: DeployVariables

  PipelineS3:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt AdminRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref abcartifactopbucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Repo: "smart-photo-album"
                Branch: "main"
                OAuthToken: "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"
                Owner: "Chetaningle"
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                BucketName: !Ref abcsmartalbumcom
                Extract: true
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
    
Outputs:
  WebsiteURL:
    Value: !GetAtt
      - abcsmartalbumcom
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - abcsmartalbumcom
          - DomainName
    Description: Name of S3 bucket to hold website content

